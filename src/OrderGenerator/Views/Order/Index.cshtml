@model OrderGenerator.WorkerService.Models.OrderModel
@{
    ViewData["Title"] = "Enviar Ordem";
}

<div class="container">
    <div class="card shadow-lg rounded-4">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0"><i class="bi bi-arrow-up-right-circle"></i> Enviar Ordem via FIX</h4>
        </div>
        <div class="card-body">

            @* Bloco de mensagens de erro do ModelState *@
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <ul class="mb-0">
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }

            <form method="post" novalidate>
                <div class="mb-3">
                    <label asp-for="Symbol" class="form-label">Símbolo:</label>
                    <select asp-for="Symbol" class="form-select" required>
                        <option value="">Selecione...</option>
                        <option>PETR4</option> 
                        <option>VALE3</option>
                        <option>VIIA4</option>
                    </select>
                    <span asp-validation-for="Symbol" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Side" class="form-label">Lado:</label>
                    <select asp-for="Side" class="form-select" required>
                        <option value="">Selecione...</option>
                        <option>Compra</option>
                        <option>Venda</option>
                    </select>
                    <span asp-validation-for="Side" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Quantity" class="form-label">Quantidade:</label>
                    <input asp-for="Quantity" class="form-control" type="number" required />
                    <span asp-validation-for="Quantity" class="text-danger small"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Price" class="form-label">Preço:</label>
                    <input asp-for="Price" class="form-control" type="number" step="0.01" required />
                    <span asp-validation-for="Price" class="text-danger small"></span>
                </div>

                <button id="submitBtn" class="btn btn-success w-100" type="submit">
                    <span id="btnText"><i class="bi bi-send-check"></i> Enviar Ordem</span>
                    <span id="btnSpinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                </button>
            </form>

            @if (ViewBag.Resposta != null)
            {
                <div class="alert alert-info mt-4 text-center fw-bold">
                    <i class="bi bi-info-circle"></i> @ViewBag.Resposta
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.querySelector("form").addEventListener("submit", (e) => {
        e.preventDefault(); // impede o envio imediato

        const form = e.target;
        const btn = document.getElementById("submitBtn");
        const text = document.getElementById("btnText");
        const spinner = document.getElementById("btnSpinner");

        if (!form.checkValidity()) {
            form.reportValidity(); // mostra os erros nativos
            return; // não continua
        }

        // Se chegou aqui, o formulário é válido
        btn.disabled = true;
        text.innerHTML = "Enviando...";
        spinner.classList.remove("d-none");

        form.submit(); // envia de fato
    });
</script>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
